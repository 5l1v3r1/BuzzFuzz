#!/usr/bin/env python2
## -*- coding: utf-8 -*-

import sys
import triton
import pintool

taintedIns = 0x400868  
target     = 0x0
readBufIns = 0x400773

Triton = pintool.getTritonContext()


symvar_addr=0
def read_hook(tid):
    global symvar_addr
    data_len= pintool.getCurrentRegisterValue(Triton.registers.eax)
    print("Taint src length : "+ str(data_len))
    for i in range(data_len):
        c = pintool.getCurrentMemoryValue(symvar_addr+i)
               
        Triton.setConcreteMemoryValue(symvar_addr+i, c)
        Triton.convertMemoryToSymbolicVariable(
                triton.MemoryAccess(symvar_addr+i,triton.CPUSIZE.BYTE)
            ).setComment('taintedByte '+str(hex(symvar_addr+i))+' : '+str(c))
           
    print('Symbolized taintedByte '+str(hex(symvar_addr))+' ~ '+str(hex(symvar_addr+i)))
    

def exploit_mmap(insn, op):
    regId   = Triton.getSymbolicRegisterId(op)
    regExpr = Triton.unrollAst(Triton.getAstFromId(regId))
    ast = Triton.getAstContext()
    exploitExpr = ast.bvslt(regExpr, ast.bv(target, triton.CPUSIZE.QWORD_BIT))

    print 'Getting model for %s -> small than 0x%x' % (insn, target)
    model = Triton.getModel(exploitExpr)
    for k, v in model.iteritems():
        print '%s (%s)' % (v, Triton.getSymbolicVariableFromId(k).getComment())

def hook(insn):
    global symvar_addr
    if insn.getAddress() == readBufIns:
       addr = pintool.getCurrentRegisterValue(Triton.registers.rcx)
       symvar_addr=addr
       print("Taint src addr head : "+str(hex(symvar_addr)))

    if insn.getAddress() == taintedIns:
        for op in insn.getOperands():
            if op.getType() == triton.OPERAND.REG:
                print 'Found Target Ins \'%s\'' % (insn)
                exploit_mmap(insn, op)
                return
                

def main():
    Triton.setArchitecture(triton.ARCH.X86_64)
    Triton.enableMode(triton.MODE.ALIGNED_MEMORY, True)

    pintool.startAnalysisFromSymbol('main')

    pintool.insertCall(hook, pintool.INSERT_POINT.BEFORE)
    pintool.insertCall(read_hook,pintool.INSERT_POINT.ROUTINE_EXIT,'read')

    pintool.runProgram()

if __name__ == '__main__':
    main()

